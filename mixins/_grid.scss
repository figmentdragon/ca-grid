/* Grid system */

/* Generate semantic grid columns with these mixins. */

@mixin make-grid()
{
    box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
    width: 100%;

    $gutter-x: $spacer;
    $gutter-y: 0;
    grid-template-rows: repeat($rows, 1fr);
    grid-template-columns: repeat($columns, 1fr);
    gap: $grid-gutter;
    grid-gap: $grid-gutter;
}


@mixin make-row()
{
    display: flex;
    flex-wrap: wrap;
    // TODO: Revisit calc order after https://github.com/react-bootstrap/react-bootstrap/issues/6039 is fixed

    margin-top: calc(-1 * $gutter-y); // stylelint-disable-line function-disallowed-list
    margin-right: calc(-.5 * $gutter-x); // stylelint-disable-line function-disallowed-list
    margin-left: calc(-.5 * $gutter-x); // stylelint-disable-line function-disallowed-list

    $gutter-x: $grid-gutter-width;
    $gutter-y: 0;
}

/* ##Columns generator## */
@mixin make-col()
{
    @each $breakpoint in $breakpoints
    {
        $infix: breakpoint-infix($breakpoint, $breakpoints);
    }
}

@mixin make-col-offset($size, $columns: $grid-columns)
{
    margin-left: if($num == 0, 0, percentage($num));

    $num: divide($size, $columns);
}

/* Row columns */
/* Specify on a parent element(e.g., .row) to force immediate children into number of columns. Supports wrapping to new lines, but does not do a Masonry style grid. */
/* Row columns*/
/* Specify on a parent element(e.g., .row) to force immediate children into NN numberof columns. Supports wrapping to new lines, but does not do a Masonry
style grid.*/
@mixin row-cols
{
    float: left;

    padding-right: .75em;
    > *
    {
        flex: 0 0 auto;

        width: divide(100, $grid-columns);
    }
}
@mixin grid-loop($name)
{
    @for $i from 0 through $grid-columns
    {
        @if $i != 0
        {
            .col--#{$name}-#{$i}
            {
                width: percentage(divide($i, $grid-columns));
                .row--flex &
                {
                    float: none;
                    flex-basis: percentage(divide($i, $grid-columns));

                    width: auto;
                    max-width: percentage(divide($i, $grid-columns));
                }
            }
        }
        .col--#{$name}-offset-#{$i}
        {
            margin-left: percentage(divide($i, $grid-columns));
        }
    }
}
